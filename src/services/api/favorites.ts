import { 
  collection, 
  addDoc,
  deleteDoc, 
  getDocs, 
  query, 
  where,
  orderBy,
  serverTimestamp,
} from 'firebase/firestore';
import { db } from '@/lib/firebase/config';
import { IMovie } from '@/components/MovieCard/types';
import {FavoriteMovie, FavoritesApiResult} from "@/types/favorites";

const COLLECTION_NAME = 'favorites';

export const getFavorites = async (userId: string): Promise<FavoritesApiResult<FavoriteMovie[]>> => {
  try {
    const favoritesRef = collection(db, COLLECTION_NAME);
    const q = query(
      favoritesRef,
      where('userId', '==', userId),
      orderBy('addedAt', 'desc')
    );
    
    const querySnapshot = await getDocs(q);
    const favorites: FavoriteMovie[] = [];
    
    querySnapshot.forEach((doc) => {
      const data = doc.data();
      favorites.push({
        ...data,
        addedAt: data.addedAt?.toMillis() || Date.now(),
        docId: doc.id
      } as FavoriteMovie);
    });

    return {
      success: true,
      data: favorites
    };
  } catch (error) {
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Firestore
    if (error instanceof Error) {
      if (error.message.includes('permission-denied')) {
        return {
          success: false,
          error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        };
      }
      if (error.message.includes('not-found')) {
        return {
          success: false,
          error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        };
      }
    }
    
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${error}`
    };
  }
};

export const addToFavorites = async (userId: string, movie: IMovie): Promise<FavoritesApiResult<FavoriteMovie>> => {
  try {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', { 
      userId, 
      movieId: movie.filmId, 
      movieName: movie.nameRu || movie.nameEn 
    });
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞
    const exists = await isFavorite(userId, movie.filmId);
    if (exists) {
      console.log('‚ö†Ô∏è –§–∏–ª—å–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
      return {
        success: false,
        error: '–§–∏–ª—å–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
      };
    }

    const favoritesRef = collection(db, COLLECTION_NAME);
    const favoriteMovie = {
      ...movie,
      userId,
      addedAt: serverTimestamp()
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', {
      filmId: favoriteMovie.filmId,
      nameRu: favoriteMovie.nameRu,
      userId: favoriteMovie.userId
    });
    
    const docRef = await addDoc(favoritesRef, favoriteMovie);
    
    return {
      success: true,
      data: {
        ...favoriteMovie,
        addedAt: Date.now(),
        docId: docRef.id
      } as FavoriteMovie
    };
  } catch (error) {
    console.error('‚ùå Error adding to favorites:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      if (error.message.includes('permission-denied')) {
        return {
          success: false,
          error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
        };
      }
      if (error.message.includes('invalid-argument')) {
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞'
        };
      }
    }
    
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: ${error}`
    };
  }
};

export const removeFromFavorites = async (userId: string, filmId: number): Promise<FavoritesApiResult> => {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', { userId, filmId });
    
    const favoritesRef = collection(db, COLLECTION_NAME);
    const q = query(
      favoritesRef,
      where('userId', '==', userId),
      where('filmId', '==', filmId)
    );
    
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      console.log('‚ö†Ô∏è –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
      return {
        success: false,
        error: '–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'
      };
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref));
    await Promise.all(deletePromises);
    
    console.log('‚úÖ –§–∏–ª—å–º —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå Error removing from favorites:', error);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${error}`
    };
  }
};

export const isFavorite = async (userId: string, filmId: number): Promise<boolean> => {
  try {
    const favoritesRef = collection(db, COLLECTION_NAME);
    const q = query(
      favoritesRef,
      where('userId', '==', userId),
      where('filmId', '==', filmId)
    );
    
    const querySnapshot = await getDocs(q);
    return !querySnapshot.empty;
  } catch (error) {
    console.error('‚ùå Error checking if favorite:', error);
    return false;
  }
};